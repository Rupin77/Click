{"ast":null,"code":"// src/redux/cartSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nlet cartInLocalStorage = localStorage.getItem(\"cart\");\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart: cartInLocalStorage ? JSON.parse(cartInLocalStorage).cart : []\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const itemInCart = state.cart.find(item => item._id === action.payload._id);\n\n      if (itemInCart) {\n        itemInCart.quantity++;\n      } else {\n        state.cart.push({ ...action.payload,\n          quantity: action.payload.quantity ? action.payload.quantity : 1 //writeToDatabase({\"Cart_Details\":payload});\n\n        });\n      }\n\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    incrementQuantity: (state, action) => {\n      const item = state.cart.find(item => item._id === action.payload);\n      item.quantity++;\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    decrementQuantity: (state, action) => {\n      const item = state.cart.find(item => item._id === action.payload);\n\n      if (item.quantity === 1) {\n        item.quantity = 1;\n      } else {\n        item.quantity--;\n      }\n\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    removeItem: (state, action) => {\n      const removeItem = state.cart.filter(item => item._id !== action.payload);\n      state.cart = removeItem;\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    clearCart: state => {\n      localStorage.removeItem(\"cart\");\n      state.cart.length = 0;\n    }\n  }\n});\nexport const cartReducer = cartSlice.reducer;\nexport const {\n  addToCart,\n  incrementQuantity,\n  decrementQuantity,\n  removeItem,\n  clearCart\n} = cartSlice.actions;","map":{"version":3,"sources":["T:/School/Click/Group_09/Code/frontend/src/store/cart.js"],"names":["createSlice","cartInLocalStorage","localStorage","getItem","cartSlice","name","initialState","cart","JSON","parse","reducers","addToCart","state","action","itemInCart","find","item","_id","payload","quantity","push","setItem","stringify","incrementQuantity","decrementQuantity","removeItem","filter","clearCart","length","cartReducer","reducer","actions"],"mappings":"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","sourcesContent":["// src/redux/cartSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nlet cartInLocalStorage = localStorage.getItem(\"cart\");\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart: cartInLocalStorage ? JSON.parse(cartInLocalStorage).cart : [],\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const itemInCart = state.cart.find(\n        (item) => item._id === action.payload._id\n      );\n      if (itemInCart) {\n        itemInCart.quantity++;\n      } else {\n        state.cart.push({\n          ...action.payload,\n          quantity: action.payload.quantity ? action.payload.quantity : 1,\n\n          //writeToDatabase({\"Cart_Details\":payload});\n        });\n      }\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    incrementQuantity: (state, action) => {\n      const item = state.cart.find((item) => item._id === action.payload);\n      item.quantity++;\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    decrementQuantity: (state, action) => {\n      const item = state.cart.find((item) => item._id === action.payload);\n      if (item.quantity === 1) {\n        item.quantity = 1;\n      } else {\n        item.quantity--;\n      }\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    removeItem: (state, action) => {\n      const removeItem = state.cart.filter(\n        (item) => item._id !== action.payload\n      );\n      state.cart = removeItem;\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    clearCart: (state) => {\n      localStorage.removeItem(\"cart\");\n      state.cart.length = 0;\n    },\n  },\n});\n\nexport const cartReducer = cartSlice.reducer;\nexport const { addToCart, incrementQuantity, decrementQuantity, removeItem, clearCart } =\n  cartSlice.actions;\n"]},"metadata":{},"sourceType":"module"}