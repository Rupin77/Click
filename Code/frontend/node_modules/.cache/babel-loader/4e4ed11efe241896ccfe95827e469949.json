{"ast":null,"code":"import { BASE_URL } from \"../../config\"; // Or from '@reduxjs/toolkit/query' if not using the auto-generated hooks\n\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\"; // initialize an empty api service that we'll inject endpoints into later as needed\n\nexport const api = createApi({\n  reducerPath: \"mainApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:3000/api/\",\n    prepareHeaders: headers => {\n      const token = localStorage.getItem(\"firebaseToken\");\n\n      if (token && token !== null && token !== \"\") {\n        headers.set(\"Authorization\", `Bearer ${token}`);\n      }\n\n      return headers;\n    }\n  }),\n  keepUnusedDataFor: 30,\n  endpoints: () => ({})\n});","map":{"version":3,"sources":["C:/Users/Rupin/Desktop/Code/frontend/src/store/middleware/api.js"],"names":["BASE_URL","createApi","fetchBaseQuery","api","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","token","localStorage","getItem","set","keepUnusedDataFor","endpoints"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB,C,CACA;;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C,C,CAEA;;AAEA,OAAO,MAAMC,GAAG,GAAGF,SAAS,CAAC;AAC3BG,EAAAA,WAAW,EAAE,SADc;AAE3BC,EAAAA,SAAS,EAAEH,cAAc,CAAC;AACxBI,IAAAA,OAAO,EAAE,4BADe;AAExBC,IAAAA,cAAc,EAAGC,OAAD,IAAa;AAC3B,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAd;;AACA,UAAIF,KAAK,IAAIA,KAAK,KAAK,IAAnB,IAA2BA,KAAK,KAAK,EAAzC,EAA6C;AAC3CD,QAAAA,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA8B,UAASH,KAAM,EAA7C;AACD;;AACD,aAAOD,OAAP;AACD;AARuB,GAAD,CAFE;AAY3BK,EAAAA,iBAAiB,EAAE,EAZQ;AAa3BC,EAAAA,SAAS,EAAE,OAAO,EAAP;AAbgB,CAAD,CAArB","sourcesContent":["import { BASE_URL } from \"../../config\";\n// Or from '@reduxjs/toolkit/query' if not using the auto-generated hooks\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\n// initialize an empty api service that we'll inject endpoints into later as needed\n\nexport const api = createApi({\n  reducerPath: \"mainApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:3000/api/\",\n    prepareHeaders: (headers) => {\n      const token = localStorage.getItem(\"firebaseToken\");\n      if (token && token !== null && token !== \"\") {\n        headers.set(\"Authorization\", `Bearer ${token}`);\n      }\n      return headers;\n    },\n  }),\n  keepUnusedDataFor: 30,\n  endpoints: () => ({}),\n});\n"]},"metadata":{},"sourceType":"module"}