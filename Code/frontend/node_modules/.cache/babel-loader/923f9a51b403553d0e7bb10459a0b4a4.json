{"ast":null,"code":"// src/redux/cartSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport swal from \"sweetalert\";\nlet cartInLocalStorage = localStorage.getItem(\"cart\");\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart: cartInLocalStorage ? JSON.parse(cartInLocalStorage).cart : []\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const itemInCart = state.cart.find(item => item._id === action.payload._id);\n\n      if (itemInCart) {\n        if (action.payload.currentQuantity > itemInCart.quantity) {\n          itemInCart.quantity++;\n        } else {\n          swal({\n            title: `Maximum allowed quantity reached`,\n            icon: 'error'\n          });\n        }\n      } else {\n        state.cart.push({ ...action.payload,\n          quantity: action.payload.quantity ? action.payload.quantity : 1 //writeToDatabase({\"Cart_Details\":payload});\n\n        });\n      }\n\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    incrementQuantity: (state, action) => {\n      const item = state.cart.find(item => item._id === action.payload._id);\n\n      if (action.payload.currentQuantity > item.quantity) {\n        item.quantity++;\n      } else {\n        swal({\n          title: `Maximum allowed quantity reached`,\n          icon: 'error'\n        });\n      }\n\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    decrementQuantity: (state, action) => {\n      const item = state.cart.find(item => item._id === action.payload);\n\n      if (item.quantity === 1) {\n        item.quantity = 1;\n      } else {\n        item.quantity--;\n      }\n\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    removeItem: (state, action) => {\n      const removeItem = state.cart.filter(item => item._id !== action.payload);\n      state.cart = removeItem;\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    clearCart: state => {\n      localStorage.removeItem(\"cart\");\n      state.cart.length = 0;\n    }\n  }\n});\nexport const cartReducer = cartSlice.reducer;\nexport const {\n  addToCart,\n  incrementQuantity,\n  decrementQuantity,\n  removeItem,\n  clearCart\n} = cartSlice.actions;","map":{"version":3,"sources":["T:/School/Click/Group_09/Code/frontend/src/store/cart.js"],"names":["createSlice","swal","cartInLocalStorage","localStorage","getItem","cartSlice","name","initialState","cart","JSON","parse","reducers","addToCart","state","action","itemInCart","find","item","_id","payload","currentQuantity","quantity","title","icon","push","setItem","stringify","incrementQuantity","decrementQuantity","removeItem","filter","clearCart","length","cartReducer","reducer","actions"],"mappings":"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","sourcesContent":["// src/redux/cartSlice.js\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport swal from \"sweetalert\";\n\nlet cartInLocalStorage = localStorage.getItem(\"cart\");\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    cart: cartInLocalStorage ? JSON.parse(cartInLocalStorage).cart : [],\n  },\n  reducers: {\n    addToCart: (state, action) => {\n      const itemInCart = state.cart.find(\n        (item) => item._id === action.payload._id\n      );\n      if (itemInCart) {\n        if((action.payload.currentQuantity) > (itemInCart.quantity)) {\n          itemInCart.quantity++;\n        } else {\n          swal({\n            title: `Maximum allowed quantity reached`,\n            icon: 'error'\n          })\n        }\n      } else {\n        state.cart.push({\n          ...action.payload,\n          quantity: action.payload.quantity ? action.payload.quantity : 1,\n\n          //writeToDatabase({\"Cart_Details\":payload});\n        });\n      }\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    incrementQuantity: (state, action) => {\n      const item = state.cart.find((item) => item._id === action.payload._id);\n      if((action.payload.currentQuantity) > (item.quantity)) {\n        item.quantity++;\n      } else {\n        swal({\n          title: `Maximum allowed quantity reached`,\n          icon: 'error'\n        })\n      }\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    decrementQuantity: (state, action) => {\n      const item = state.cart.find((item) => item._id === action.payload);\n      if (item.quantity === 1) {\n        item.quantity = 1;\n      } else {\n        item.quantity--;\n      }\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    removeItem: (state, action) => {\n      const removeItem = state.cart.filter(\n        (item) => item._id !== action.payload\n      );\n      state.cart = removeItem;\n      localStorage.setItem(\"cart\", JSON.stringify(state));\n    },\n    clearCart: (state) => {\n      localStorage.removeItem(\"cart\");\n      state.cart.length = 0;\n    },\n  },\n});\n\nexport const cartReducer = cartSlice.reducer;\nexport const { addToCart, incrementQuantity, decrementQuantity, removeItem, clearCart } =\n  cartSlice.actions;\n"]},"metadata":{},"sourceType":"module"}